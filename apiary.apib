FORMAT: 1A

# The Homework API
The API that connects students, assignments, classes, and other cool things.

# Group Classes
The Class model represents a collection of Student models and at at least one Instructor model.

## Classes Collection [/classes]
### List all Classes [GET]
+ Response 200 (application/json)

        [
            {
                "course": "Frontend Engineering",
                "course_id": "1",
                "start_date": "1422547777159",
                "id": "8afh3age28gehsal9j23e1ifis",
                "instructor": {
                    "github": "jacobthemyth",
                    "name": "Jake Smith"
                    "github_id": 5644576
                },
                "students": [
                    {
                        "github": "chad-m",
                        "name": "Chat Coolguy",
                        "github_id": 6140293,
                        "status": "Good Standing"
                    },
                    {
                        "github": "tbarth17",
                        "name": "Coolguy Barth",
                        "github_id": 8423979,
                        "status": "Good Standing"

                    }
                ]
            }
        ]

### Create a Class [POST]

+ Request (application/json)

    #### POST fields
    | field                        | type                   | required             |
    |------------------------------|------------------------|----------------------|
    | `course_id`                  | string                 | yes                  |
    | `instructor`                 | object                 | yes                  |
    | `current_class_id`           | string                 | no                   |

    \* Either `github_id`, `github`, or both must be provided for the instructor and each student. If either field is provided the other will be looked up automatically.

    + Body

            {
                "course_id": "1",
                "start_date": "1422547777159",
                "instructor": {
                    "github": "allanmonzon",
                    "github_id": 5644576
                },
                "students": [
                    {
                        "github": "chad-m",
                        "github_id": 6140293
                    },
                    {
                        "github": "tbarth17",
                        "github_id": 8423979
                    }
                ]
            }


+ Response 201 (application/json)

        {
            "course": "Frontend Engineering",
            "course_id": "1",
            "id": "8afh3age28gehsal9j23e1ifis",
            "start_date": "1422547777159",
            "instructor": {
                "github": "allanmonzon",
                "github_id": 5644576
            },
            "students": [
                {
                    "github": "chad-m",
                    "name": "Chat Coolguy",
                    "github_id": 6140293,
                    "status": "Good Standing"

                },
                {
                    "github": "tbarth17",
                    "name": "Coolguy Barth",
                    "github_id": 8423979,
                    "status": "Good Standing"

                }
            ]
        }


## Class [/classes/{id}]
A single Class object with all its details

+ Parameters
    + id (required, string) ... String `id` of the Class.

### Retrieve a Class [GET]

+ Response 200 (application/json)

    + Body

            { 
                "course": "Frontend Engineering",
                "course_id": "1",
                "id": "8afh3age28gehsal9j23e1ifis",
                "start_date": "1422547777159",
                "instructor": {
                    "github": "allanmonzon",
                    "github_id": 5644576
                },
                "students": [
                    {
                        "github": "chad-m",
                        "name": "Chat Coolguy",
                        "github_id": 6140293,
                        "status": "Good Standing"

                    },
                    {
                        "github": "tbarth17",
                        "name": "Coolguy Barth",
                        "github_id": 8423979,
                        "status": "Good Standing"
                    }
                ]
            }
            

### Delete a Class [DELETE]

+ Response 204


### Update a Class [PUT]

+ Response 200 (application/json)

    + Body

            { 
                "course": "Frontend Engineering",
                "course_id": "1",
                "id": "8afh3age28gehsal9j23e1ifis",
                "start_date": "1422547777159",
                "instructor": {
                    "github": "allanmonzon",
                    "github_id": 5644576
                },
                "students": [
                    {
                        "github": "chad-m",
                        "name": "Chat Coolguy",
                        "github_id": 6140293,
                        "status": "Good Standing"
                    },
                    {
                        "github": "tbarth17",
                        "name": "Coolguy Barth",
                        "github_id": 8423979,
                        "status": "Good Standing"
                    }
                ]
            }


## Changing which Students are in a Class [/classes/{id}/students/{student_id}]
Fetching a Class will always include a basic list of students, so there's no need for an endpoint to list students in a class. This nested endpoint is only for adding and removing Students to and from a Class. Please not that this doesn't create/delete a student model; it just changes its relation to the Class instance.

+ Parameters
    + id (required, string) ... `id` of the Class instance.
    + student_id (required, string) ... `id` of the Student instance.

### Add a student to a class [POST]

+ Request (application/json)

    No JSON payload is required to POST to this endpoint, just specify the Class `id` and Student `id` in the url.

    + Body

+ Response 200 (application/json)

    + Body

            { 
                "course": "Frontend Engineering",
                "course_id": "1",
                "id": "8afh3age28gehsal9j23e1ifis",
                "start_date": "1422547777159",
                "instructor": {
                    "github": "allanmonzon",
                    "github_id": 5644576
                },
                "students": [
                    {
                        "github": "chad-m",
                        "name": "Chat Coolguy",
                        "github_id": 6140293,
                        "status": "Good Standing"
                    },
                    {
                        "github": "tbarth17",
                        "name": "Coolguy Barth",
                        "github_id": 8423979,
                        "status": "Good Standing"
                    }
                ]
            }

### Remove Student from Class [DELETE]

+ Response 204



# Group Students
The student model connects a github account with at least one Class, and Submissions.

## Students Collection [/students]
### List all Students [GET]

+ Response 200 (application/json)

        [
            {
                "id": "8g2lsig91309halg9a",
                "github": "chad-m",
                "name": "Chat Coolguy",
                "github_id": 6140293,
                "current_class": {
                    "id": "8afh3age28gehsal9j23e1ifis",
                    "course": "Frontend Engineering",
                    "course_id": "1",
                    "start_date": "1422547777159",
                    "status": "Good Standing"
                },
                "classes": [
                    {
                        "id": "8afh3age28gehsal9j23e1ifis",
                        "course": "Frontend Engineering",
                        "course_id": "1",
                        "start_date": "1422547777159"
                    },
                    {
                        "id": "h28fg02djgh282l93h18sjg1a5",
                        "course": "Mobile Engineering",
                        "course_id": "2",
                        "start_date": "1422541177159"
                    },
                ]
            }
        ]

### Create a Student [POST]

+ Request (application/json)

    #### POST fields
    
    | field                        | type                   | required             |
    |------------------------------|------------------------|----------------------|
    | `github`                     | integer                | no*                  |
    | `github_id`                  | string                 | no*                  |


    Either `github_id`, `github`, or both must be provided. If either field is provided the other will be looked up automatically.

    + Body

            {
                "github": "chad-m",
                "github_id": 6140293,
                "current_class_id": "8afh3age28gehsal9j23e1ifis"
            }



+ Response 200 (application/json)

        {
            "id": "8g2lsig91309halg9a",
            "github": "chad-m",
            "name": "Chat Coolguy",
            "github_id": 6140293,
            "current_class_id": "8afh3age28gehsal9j23e1ifis",
            "classes": [
                {
                    "id": "8afh3age28gehsal9j23e1ifis",
                    "course": "Frontend Engineering",
                    "course_id": "1",
                    "start_date": "1422547777159"
                }
            ]
        }

## Student [/students/{id}]
A single Student object 

+ Parameters
    + id (required, string) ... `id` of the Student.

### Retrieve a Student [GET]

+ Response 200 (application/json)

    + Body

            {
                "id": "8g2lsig91309halg9a",
                "github": "chad-m",
                "name": "Chat Coolguy",
                "github_id": 6140293,
                "current_class_id": "8afh3age28gehsal9j23e1ifis",
                "classes": [
                    {
                        "id": "8afh3age28gehsal9j23e1ifis",
                        "course": "Frontend Engineering",
                        "course_id": "1",
                        "start_date": "1422547777159"
                    }
                ]
            }
            
### Remove a Student [DELETE]

+ Response 204


### Update a Student [PUT]

+ Response 200 (application/json)

    + Body

            {
                "id": "8g2lsig91309halg9a",
                "github": "chad-m",
                "name": "Chat Coolguy",
                "github_id": 6140293,
                "current_class_id": "8afh3age28gehsal9j23e1ifis",
                "classes": [
                    {
                        "id": "8afh3age28gehsal9j23e1ifis",
                        "course": "Frontend Engineering",
                        "course_id": "1",
                        "start_date": "1422547777159"
                    }
                ]
            }



# Group Projects
The project model reprsents a single package from a projects repository.

## Projects Collection [/projects]
### List all Projects [GET]

+ Response 200 (application/json)

    When fetching a list of projects, the payload will not include a `related_files` manifest. `related_files` is included, however, when fetching a single project.

    + Body
            [
                {
                    "id": "8afh3age28gehsal9j23e1ifis",
                    "repository": "https://github.com/theironyard.com/js-assignments",
                    "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                    "version": "0.0.1",
                    "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                    "timestamp": "1422547777159",
                    "name": "Surf and Paddle",
                    "title": "html-intro-surf-paddle",
                    "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                    "keywords": [
                        "html",
                        "css",
                        "layout",
                        "responsive"
                    ]
                },
                {
                    "id": "a0ab938hgal3g920agalh39ghs",
                    "repository": "https://github.com/theironyard.com/js-assignments",
                    "url": "https://github.com/theironyard/js-assignments/tree/1e9a3f1c9d0c3d4873266d7536e3ad800b695fa3/color-clock",
                    "version": "0.0.1",
                    "sha": "1e9a3f1c9d0c3d4873266d7536e3ad800b695fa3",
                    "timestamp": "1422547777159",
                    "name": "Color Clock",
                    "title": "color-clock",
                    "description": "This assignment serves to reinforce JS fundamentals with setInterval, writing to the DOM, practicing CSS animations, positions, and transforms, and finally breaking down complex problems into simple sequences in code.",
                    "keywords": [
                        "JavaScript"
                    ]
                }
            ]

### Create a Project  [POST]

+ Request (application/json)

    When creating a project, `url` is the only field necessary for creation. A `.homework.json` file will be searched for in the project folder, and if found its settings will be saved to the project instance. `.homework.json` is a file created by running `homework init`.

    #### POST fields
    
    | field                        | type                   | required             |
    |------------------------------|------------------------|----------------------|
    | `url`                        | string                 | yes                  |


    `url` must be a valid url, and must include a SHA (tree/master is not valid!).

    + Body

            {
                "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle"
            }



+ Response 200 (application/json)

        {
            "id": "8afh3age28gehsal9j23e1ifis",
            "repository": "https://github.com/theironyard.com/js-assignments",
            "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
            "version": "0.0.1",
            "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
            "timestamp": "1422547777159",
            "name": "Surf and Paddle",
            "title": "html-intro-surf-paddle",
            "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
            "keywords": [
                "html",
                "css",
                "layout",
                "responsive"
            ],
            "related_files": [
                "surf-and-paddle.psd",
                "images/logo.png",
                "fonts/octocons.woff"
            ]
        }

## Project [/projects/{id}]
A single project.

+ Parameters
    + id (required, string) ... `id` of the project.

### Retrieve a Project [GET]

+ Response 200 (application/json)

    + Body

            {
                "id": "8afh3age28gehsal9j23e1ifis",
                "repository": "https://github.com/theironyard.com/js-assignments",
                "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                "version": "0.0.1",
                "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                "timestamp": "1422547777159",
                "name": "Surf and Paddle",
                "title": "html-intro-surf-paddle",
                "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                "keywords": [
                    "html",
                    "css",
                    "layout",
                    "responsive"
                 ],
                    "related_files": [
                    "surf-and-paddle.psd",
                    "images/logo.png",
                    "fonts/octocons.woff"
                 ]
            }
            
### Remove a Project [DELETE]

+ Response 409

    Because projects are immutable, DELETE requests will always return a 409 "Conflict" status.


### Update a Project [PUT]

+ Response 409 (application/json)

    Because projects are immutable, PUT and PATH requests will always return a 409 "Conflict" status.

    + Body
            {
                "message": "Projects are immutable, and cannot be updated. To make a new copy of a project with optional overwriting properties, POST to /projects/{id}."
            }

### Duplicate a Project [POST]
+ Request (application/json)
  
    Payload properties other than `url` will be ignored. Updates to `.homewor.json` should already be published at the new url.

    + Body

            {
                "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle"
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "8afh3age28gehsal9j23e1ifis",
                "repository": "https://github.com/theironyard.com/js-assignments",
                "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                "version": "0.0.1",
                "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                "timestamp": "1422547777159",
                "name": "Surf and Paddle",
                "title": "html-intro-surf-paddle",
                "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                "keywords": [
                    "html",
                    "css",
                    "layout",
                    "responsive"
                ],
                "related_files": [
                    "surf-and-paddle.psd",
                    "images/logo.png",
                    "fonts/octocons.woff"
                ]
            }


# Group Assignments
The project model reprsents a single package from a projects repository.

## Assignments Collection [/cohorts/{id}/assignments]

+ Parameters
    + id (required, string) ... `id` of the cohort.

### List all Assignments [GET]

+ Response 200 (application/json)

    Blah.

    + Body

            [
                {
                    "cohort_id": "239f28agb20aogi1bia0ghj4we9",
                    "project_id": "8923hgal38oral8f1ihfaljgaa9",
                    "week": 4,
                    "due_date": "1422547777159"
                }
            ]



### Create a Assignment  [POST]

+ Request (application/json)


    #### POST fields
    
    | field                        | type                   | required             |
    |------------------------------|------------------------|----------------------|
    | `cohort_id`                  | string                 | yes                  |
    | `project_id`                 | string                 | yes                  |
    | `week`                       | integer                | yes                  |
    | `order`                      | integer                | no*                  |
    | `due_date`                   | string                 | yes                  |
    
    The `week` property acts as a gatekeeper, i.e. students cannot fetch assignments from upcoming weeks. Hence, if you complete all of Week 1's homework, you cannot fetch assignments from Week 2 until that week has begun. `week` should be an integer representing that week and is not indexed by zero; Week 1 is represented by `week: 1`.

    `order` provides ordinality for assignments. By default it will be placed as the last assignment in that week, i.e. when adding an assigment to a week that already has 3 assignments, it will be automatically given an `order` of 3 (zero-indexed). This behavior can be overridden by denoting the position manually. In this case any successive assignments will be moved one space further.

    + Body

            {
                "cohort_id": "239f28agb20aogi1bia0ghj4we9",
                "project_id": "8923hgal38oral8f1ihfaljgaa9",
                "week": 4,
                "due_date": "1422547777159"
            }



+ Response 200 (application/json)

        {
            "id": "gi24ohgag8in2la92340284",
            "cohort_id": "239f28agb20aogi1bia0ghj4we9",
            "project_id": "8923hgal38oral8f1ihfaljgaa9",
            "week": 4,
            "order": 0,
            "due_date": "1422547777159",
            project: {
                "id": "8afh3age28gehsal9j23e1ifis",
                "repository": "https://github.com/theironyard.com/js-assignments",
                "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                "version": "0.0.1",
                "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                "timestamp": "1422547777159",
                "name": "Surf and Paddle",
                "title": "html-intro-surf-paddle",
                "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                "keywords": [
                    "html",
                    "css",
                    "layout",
                    "responsive"
                ],
                "related_files": [
                    "surf-and-paddle.psd",
                    "images/logo.png",
                    "fonts/octocons.woff"
                ]
            }
        }

## Next Assignment [/cohorts/{id}/assignments/next]

+ Parameters
    + id (required, string) ... `id` of the cohort.

### Get next Assignment [GET]

+ Response 200 (application/json)

    Blah.

    + Body

            {
                "id": "gi24ohgag8in2la92340284",
                "cohort_id": "239f28agb20aogi1bia0ghj4we9",
                "project_id": "8923hgal38oral8f1ihfaljgaa9",
                "week": 4,
                "order": 0,
                "due_date": "1422547777159",
                project: {
                    "id": "8afh3age28gehsal9j23e1ifis",
                    "repository": "https://github.com/theironyard.com/js-assignments",
                    "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                    "version": "0.0.1",
                    "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                    "timestamp": "1422547777159",
                    "name": "Surf and Paddle",
                    "title": "html-intro-surf-paddle",
                    "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                    "keywords": [
                        "html",
                        "css",
                        "layout",
                        "responsive"
                    ],
                    "related_files": [
                        "surf-and-paddle.psd",
                        "images/logo.png",
                        "fonts/octocons.woff"
                    ]
                }
            }


## Assignment [/cohort/{cohord_id}/assignments/{id}]
A single project.

+ Parameters
    + cohort_id (required, string) ... `id` of the project.
    + id (required, string) ... `id` of the assignment.

### Retrieve a Assignment [GET]

+ Response 200 (application/json)

    + Body

            {
                "id": "gi24ohgag8in2la92340284",
                "cohort_id": "239f28agb20aogi1bia0ghj4we9",
                "project_id": "8923hgal38oral8f1ihfaljgaa9",
                "week": 4,
                "order": 0,
                "due_date": "1422547777159",
                project: {
                    "id": "8afh3age28gehsal9j23e1ifis",
                    "repository": "https://github.com/theironyard.com/js-assignments",
                    "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                    "version": "0.0.1",
                    "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                    "timestamp": "1422547777159",
                    "name": "Surf and Paddle",
                    "title": "html-intro-surf-paddle",
                    "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                    "keywords": [
                        "html",
                        "css",
                        "layout",
                        "responsive"
                    ],
                    "related_files": [
                        "surf-and-paddle.psd",
                        "images/logo.png",
                        "fonts/octocons.woff"
                    ]
                }
            }
            
### Remove a Assignment [DELETE]

+ Response 204

### Update a Assignment [PUT]

+ Response 200 (application/json)


    + Body

            {
                "id": "gi24ohgag8in2la92340284",
                "cohort_id": "239f28agb20aogi1bia0ghj4we9",
                "project_id": "8923hgal38oral8f1ihfaljgaa9",
                "week": 4,
                "order": 0,
                "due_date": "1422547777159",
                project: {
                    "id": "8afh3age28gehsal9j23e1ifis",
                    "repository": "https://github.com/theironyard.com/js-assignments",
                    "url": "https://github.com/theironyard/js-assignments/tree/bbd9f77989384afac6753fa2cbf32b8367e221db/html-intro-surf-paddle",
                    "version": "0.0.1",
                    "sha": "bbd9f77989384afac6753fa2cbf32b8367e221db",
                    "timestamp": "1422547777159",
                    "name": "Surf and Paddle",
                    "title": "html-intro-surf-paddle",
                    "description": "As a developer on the web, you will sometimes be tasked with creating an html page simply from an image file.  In this assignment, you'll be taking an image and turning it into a functioning website.",
                    "keywords": [
                        "html",
                        "css",
                        "layout",
                        "responsive"
                    ],
                    "related_files": [
                        "surf-and-paddle.psd",
                        "images/logo.png",
                        "fonts/octocons.woff"
                    ]
                }
            }
